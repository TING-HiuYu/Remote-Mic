name: Build Multi-Platform Bundles

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Optional version (e.g. v0.1.0). If provided (and no tag), a release will use it."
        required: false
        type: string
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: remote-mic

jobs:
  matrix-prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - id: set-matrix
        run: |
          echo 'matrix={"include":[{"os":"ubuntu-latest","target":"x86_64-unknown-linux-musl"},{"os":"ubuntu-latest","target":"aarch64-unknown-linux-musl"},{"os":"windows-latest","target":"x86_64-pc-windows-msvc"},{"os":"macos-latest","target":"x86_64-apple-darwin"},{"os":"macos-latest","target":"aarch64-apple-darwin"}]}' >> $GITHUB_OUTPUT
      - id: set-version
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VER="${GITHUB_REF#refs/tags/}"
          elif [[ "${{ inputs.version }}" != "" ]]; then
            VER="${{ inputs.version }}"
          else
            VER="manual-${GITHUB_RUN_NUMBER}"
          fi
          echo "version=$VER" >> $GITHUB_OUTPUT

  build:
    name: Bundle ${{ matrix.target }}
    needs: matrix-prepare
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-prepare.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      VERSION: ${{ needs.matrix-prepare.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Install dioxus-cli
        run: cargo install dioxus-cli --locked

      - name: Bundle (native / dx)
        if: startsWith(matrix.target, 'x86_64-') || startsWith(matrix.target, 'aarch64-apple') || matrix.target == 'x86_64-pc-windows-msvc'
        run: |
          echo "dx bundle for ${{ matrix.target }}"
          # Use singular --target (previous --targets caused failure)
          dx bundle --platform desktop --release --target ${{ matrix.target }} || {
            echo "dx bundle failed; attempting plain cargo build as fallback";
            rustup target add ${{ matrix.target }} || true
            cargo build --release --target ${{ matrix.target }};
          }

      - name: Bundle linux aarch64 via docker (dx inside cross image)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/cross-rs/aarch64-unknown-linux-musl:latest
          options: -v ${{ github.workspace }}:/project -w /project
          run: |
            cargo install dioxus-cli --locked || true
            dx bundle --platform desktop --release --target aarch64-unknown-linux-musl || {
              echo "dx bundle (musl aarch64) failed; fallback to cargo build";
              rustup target add aarch64-unknown-linux-musl || true
              cargo build --release --target aarch64-unknown-linux-musl;
            }

      - name: Collect & archive artifacts
        shell: bash
        run: |
          set -e
          VERSION_SAFE="$VERSION"
          OUT=dist
          mkdir -p "$OUT"
          echo "Listing build target tree (partial):"
          find target -maxdepth 4 -type f -name "${PROJECT_NAME}*" | head -n 40 || true
          BIN_PATTERN="target/${{ matrix.target }}/release/${PROJECT_NAME}*"
          for f in $BIN_PATTERN; do [ -f "$f" ] && cp "$f" "$OUT/" || true; done
          # dx bundle output (bundle folder) if exists
          if [ -d "target/release/bundle" ]; then
            cp -R target/release/bundle "$OUT/" 2>/dev/null || true
          fi
          ls -l "$OUT" || true
          ARCHIVE_DIR=pack
          mkdir -p "$ARCHIVE_DIR"
          if [[ "${{ matrix.target }}" == *windows* || "${{ matrix.target }}" == *apple-darwin* ]]; then
            ARCHIVE="remote-mic-${VERSION_SAFE}-${{ matrix.target }}.zip"
            (cd "$OUT" && zip -r "../$ARCHIVE" .) || echo "Zip creation failed"
          else
            ARCHIVE="remote-mic-${VERSION_SAFE}-${{ matrix.target }}.tar.gz"
            tar czf "$ARCHIVE" -C "$OUT" . || echo "Tar creation failed"
          fi
          mv "$ARCHIVE" "$ARCHIVE_DIR/" 2>/dev/null || true
          pushd "$ARCHIVE_DIR" >/dev/null || exit 0
          FILE=$(ls -1 remote-mic-${VERSION_SAFE}-${{ matrix.target }}.* 2>/dev/null | head -n1 || true)
          if [ -f "$FILE" ]; then
            if command -v shasum >/dev/null 2>&1; then shasum -a 256 "$FILE" > "$FILE.sha256";
            elif command -v sha256sum >/dev/null 2>&1; then sha256sum "$FILE" | awk '{print $1"  "f}' f="$FILE" > "$FILE.sha256";
            elif command -v certutil >/dev/null 2>&1; then certutil -hashfile "$FILE" SHA256 | sed -n '2p' | tr -d '\r' | awk '{print $1"  "f}' f="$FILE" > "$FILE.sha256"; fi
          else
            echo "No archive produced" > NO_ARCHIVE.txt
          fi
          popd >/dev/null || true
          echo "Archive contents:"; ls -l "$ARCHIVE_DIR" || true
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: pack/*

  release:
    name: Create Release
    needs: [matrix-prepare, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || inputs.version != ''
    env:
      VERSION: ${{ needs.matrix-prepare.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts
      - name: Gather release assets
        run: |
          mkdir -p release
          find _artifacts -maxdepth 2 -type f -exec cp {} release/ \; || true
          ls -l release || true
      - name: Consolidate checksums
        run: |
          cd release
          # consolidate any per-file .sha256 into one list
            grep -h "remote-mic-" *.sha256 2>/dev/null | sort -k2 -u > SHA256SUMS.txt || true
          cd ..
      - name: Generate release notes
        id: notes
        shell: bash
        run: |
          {
            echo "# Remote Mic $VERSION";
            echo;
            echo "Automated build for $VERSION";
            echo;
            echo "## Artifacts";
            ls -1 release/remote-mic-* 2>/dev/null | sed 's|release/|- |';
            echo;
            echo "## Trigger";
            if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
              echo "Triggered by tag $GITHUB_REF";
            else
              echo "Manual workflow_dispatch";
            fi
            echo;
            echo "Generated at $(date -u '+%Y-%m-%dT%H:%M:%SZ')";
          } > release_body.md
          echo "body_path=release_body.md" >> $GITHUB_OUTPUT
      - name: Create (or update) release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: release/*
          body_path: release_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
